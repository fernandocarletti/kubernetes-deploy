#!/usr/bin/env ruby
# frozen_string_literal: true

require 'kubernetes-deploy'
require 'kubernetes-deploy/render_task'
require 'optparse'
require 'tmpdir'

template_dir = nil
templates = []
use_stdin = false
bindings = {}

ARGV.options do |opts|
  opts.on("--bindings=BINDINGS", "Expose additional variables to ERB templates " \
    "(format: k1=v1,k2=v2, JSON string or file (JSON or YAML) path prefixed by '@')") do |binds|
    bindings.merge!(KubernetesDeploy::BindingsParser.parse(binds))
  end
  opts.on("--template-dir=DIR", "Set the template dir (default: config/deploy/$ENVIRONMENT)") { |v| template_dir = v }
  opts.on("--use-stdin", "Use $stdin instead of a template dir") { use_stdin = true }
  opts.parse!
end

if template_dir && use_stdin
  puts "The flags --use-stdin and --template-dir cannot be combined"
  exit(1)
end
if template_dir || !use_stdin
  template_dir = KubernetesDeploy::OptionsHelper.default_and_check_template_dir(template_dir)
  templates = ARGV
end

logger = KubernetesDeploy::FormattedLogger.build(verbose_prefix: false)
revision = KubernetesDeploy::OptionsHelper.revision_from_environment

render_task = ->(template_dir) do
  runner = KubernetesDeploy::RenderTask.new(
    logger: logger,
    current_sha: revision,
    template_dir: template_dir,
    bindings: bindings,
  )

  success = runner.run(STDOUT, templates)
  exit(1) unless success
end

with_stdin = ->(task_proc) do
  if $stdin.tty?
    puts "Nothing to read from $stdin"
    exit(1)
  end

  Dir.mktmpdir("render-task") do |template_dir|
    input = $stdin.readlines.join("")
    file = File.open("#{File.expand_path(template_dir)}/templates.yml.erb", 'w+') { |f| f.print(input) }
    task_proc.call(template_dir)
  end
end

use_stdin ? with_stdin.call(render_task) : render_task.call(template_dir)
